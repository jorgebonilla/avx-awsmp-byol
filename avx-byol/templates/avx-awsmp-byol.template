{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Aviatrix Systems - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "Network Configuration" },
          "Parameters": [ "VPCID", "PublicSubnet1" ]
        },
        {
          "Label": { "default":"Amazon EC2 Configuration" },
          "Parameters": [ "KeyPair", "InstanceTypeParam" ]
        },
        {
          "Label": { "default": "Controller Information" },
          "Parameters": [ "ControllerSize" ]
        },
        {
          "Label": { "default": "IAM role creation" },
          "Parameters": [ "CreateIamRole" ]
        }
      ],
      "ParameterLabels": {
         "VPCID": { "default": "Which VPC should the Aviatrix Controller be deployed to?" },
         "PublicSubnet1": { "default": "Which subnet within that VPC?" },
         "KeyPair": { "default": "Which keypair will be used?" },
         "ControllerSize": { "default": "Aviatrix Controller instance type"},
         "CreateIamRole": { "default": "Select no if Aviatrix IAM role has not been created, select aviatrix-role-ec2 if there is already Avivatrix IAM role created"}
      }
    }
  },
  "Parameters": {
    "VPCID": {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "Select Your VPC"
      },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Select Subnet"
    },
    "KeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Select your Keypair"
    },
    "ControllerSize": {
      "Type": "String",
      "Default": "t2.large",
      "AllowedValues": ["t2.large", "m3.medium","m3.large","m3.xlarge","c4.large","c4.xlarge", "c4.2xlarge"],
      "Description": "Select an instance size. Default is t2.large."
    },
    "CreateIamRole": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": ["Yes","No"],
      "Description": "Create IAM roles"
    }
  },

  "Conditions": {
    "CreateIamRoleCondition": {
            "Fn::Equals": [
                {
                    "Ref": "CreateIamRole"
                },
                "Yes"
            ]
    }
  },

  "Mappings": {
    "RegionMap": {
      "us-east-1": { "Name": "ami-db9bb9a1" },
      "us-east-2": { "Name": "ami-b40228d1" },
      "us-west-1": { "Name": "ami-2a7e7c4a" },
      "us-west-2": { "Name": "ami-fd48f885" },
      "ca-central-1": { "Name": "ami-de4bceba" },
      "eu-central-1": { "Name": "ami-a025b9cf" },
      "eu-west-1": { "Name": "ami-830d93fa" },
      "eu-west-2": { "Name": "ami-bc253ed8" },
      "eu-west-3": { "Name": "ami-f8e35585" },
      "ap-southeast-1": { "Name": "ami-0484f878" },
      "ap-southeast-2": { "Name": "ami-34728e56" },
      "ap-northeast-2": { "Name": "ami-d902a2b7" },
      "ap-northeast-1": { "Name": "ami-2a43244c" },
      "ap-south-1": { "Name": "ami-e7560088" },
      "sa-east-1": { "Name": "ami-404c012c" }
    }
  },
  "Resources": {
    "AviatrixRoleEC2": {
      "Condition": "CreateIamRoleCondition",
      "Type": "AWS::IAM::Role",
      "Properties": {
         "RoleName": "aviatrix-role-ec2",
         "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
               "Effect": "Allow",
               "Principal": {
                  "Service": [ "ec2.amazonaws.com" ]
               },
               "Action": [ "sts:AssumeRole" ]
            } ]
         },
         "Path": "/"
       }
    },
    "AviatrixRoleApp": {
      "Condition": "CreateIamRoleCondition",
      "Type": "AWS::IAM::Role",
      "Properties": {
         "RoleName": "aviatrix-role-app",
         "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
               "Effect": "Allow",
               "Principal": { "AWS": [ { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" } , ":root" ] ] } ] },
               "Action": [ "sts:AssumeRole" ]
            } ]
         },
         "Path": "/"
       }
    },
    "CreateAviatrixAssumeRolePolicy": {
      "Condition": "CreateIamRoleCondition",
      "DependsOn": [ "AviatrixRoleEC2", "AviatrixRoleApp" ],
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties":
      {
        "ManagedPolicyName": "aviatrix-assume-role-policy",
        "Description": "Policy for creating aviatrix-assume-role-policy",
        "Path": "/",
        "PolicyDocument":
        {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",

            "Action": [
                      "iam:UpdateAssumeRolePolicy",
                      "sts:AssumeRole"
                  ],
                  "Resource": "arn:aws:iam::*"
              }
          ]
        },
        "Roles":
        [ {
          "Ref": "AviatrixRoleEC2"
        } ]
      }
    },
    "CreateAviatrixAppPolicy": {
      "Condition": "CreateIamRoleCondition",
      "DependsOn": [ "AviatrixRoleEC2", "AviatrixRoleApp" ],
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties":
      {
        "ManagedPolicyName": "aviatrix-app-policy",
        "Description": "Policy for creating aviatrix-app-policy",
        "Path": "/",
        "PolicyDocument":
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:Describe*",
                        "elasticloadbalancing:Describe*",
                        "route53:List*",
                        "route53:Get*",
                        "sqs:Get*",
                        "sqs:List*",
                        "sns:List*",
                        "s3:List*",
                        "s3:Get*",
                        "iam:List*",
                        "iam:Get*"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:RunInstances"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": "ec2:RunInstances",
                    "Resource": "arn:aws:ec2:*:*:image/ami-*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DeleteSecurityGroup",
                        "ec2:RevokeSecurityGroupEgress",
                        "ec2:RevokeSecurityGroupIngress",
                        "ec2:AuthorizeSecurityGroup*",
                        "ec2:CreateSecurityGroup",
                        "ec2:AssociateRouteTable",
                        "ec2:CreateRoute",
                        "ec2:CreateRouteTable",
                        "ec2:DeleteRoute",
                        "ec2:DeleteRouteTable",
                        "ec2:DisassociateRouteTable",
                        "ec2:ReplaceRoute",
                        "ec2:ReplaceRouteTableAssociation"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:AllocateAddress",
                        "ec2:AssociateAddress",
                        "ec2:DisassociateAddress",
                        "ec2:ReleaseAddress",
                        "ec2:AssignPrivateIpAddresses",
                        "ec2:AttachNetworkInterface",
                        "ec2:CreateNetworkInterface",
                        "ec2:DeleteNetworkInterface",
                        "ec2:DetachNetworkInterface",
                        "ec2:ModifyNetworkInterfaceAttribute",
                        "ec2:ResetNetworkInterfaceAttribute",
                        "ec2:UnassignPrivateIpAddresses",
                        "ec2:ModifyInstanceAttribute",
                        "ec2:MonitorInstances",
                        "ec2:RebootInstances",
                        "ec2:ReportInstanceStatus",
                        "ec2:ResetInstanceAttribute",
                        "ec2:StartInstances",
                        "ec2:StopInstances",
                        "ec2:TerminateInstances",
                        "ec2:UnmonitorInstances",
                        "ec2:AttachInternetGateway",
                        "ec2:CreateInternetGateway",
                        "ec2:DeleteInternetGateway",
                        "ec2:DetachInternetGateway",
                        "ec2:CreateKeyPair",
                        "ec2:DeleteKeyPair",
                        "ec2:CreateSubnet",
                        "ec2:DeleteSubnet",
                        "ec2:ModifySubnetAttribute",
                        "ec2:CreateTags",
                        "ec2:DeleteTags",
                        "ec2:CreateVpc",
                        "ec2:DeleteVpc",
                        "ec2:ModifyVpcAttribute",
                        "ec2:CreateCustomerGateway",
                        "ec2:DeleteCustomerGateway",
                        "ec2:CreateVpnConnection",
                        "ec2:DeleteVpnConnection",
                        "ec2:CreateVpcPeeringConnection",
                        "ec2:AcceptVpcPeeringConnection",
                        "ec2:DeleteVpcPeeringConnection"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                        "elasticloadbalancing:AttachLoadBalancerToSubnets",
                        "elasticloadbalancing:ConfigureHealthCheck",
                        "elasticloadbalancing:CreateLoadBalancer*",
                        "elasticloadbalancing:DeleteLoadBalancer*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:ModifyLoadBalancerAttributes",
                        "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "route53:ChangeResourceRecordSets",
                        "route53:CreateHostedZone",
                        "route53:DeleteHostedZone"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "s3:CreateBucket",
                        "s3:DeleteBucket",
                        "s3:PutObject",
                        "s3:DeleteObject"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "sqs:AddPermission",
                        "sqs:ChangeMessageVisibility",
                        "sqs:CreateQueue",
                        "sqs:DeleteMessage",
                        "sqs:DeleteQueue",
                        "sqs:PurgeQueue",
                        "sqs:ReceiveMessage",
                        "sqs:RemovePermission",
                        "sqs:SendMessage",
                        "sqs:SetQueueAttributes"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "sts:AssumeRole"
                    ],
                    "Resource": "arn:aws:iam::*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "iam:PassRole",
                        "iam:AddRoleToInstanceProfile",
                        "iam:CreateInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:RemoveRoleFromInstanceProfile"
                    ],
                    "Resource": "*"
                }
            ]
        },
        "Roles":
        [ {
          "Ref": "AviatrixRoleApp"
        } ]
      }
    },
    "AviatrixInstanceProfile": {
      "Condition": "CreateIamRoleCondition",
      "DependsOn": [ "AviatrixRoleEC2", "CreateAviatrixAssumeRolePolicy", "CreateAviatrixAppPolicy" ],
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "aviatrix-role-ec2",
        "Path": "/",
        "Roles": [ "aviatrix-role-ec2" ]
      }
    },

    "WaitHandle": {
    	"Type": "AWS::CloudFormation::WaitConditionHandle",
   		"Properties": {}
    },
    "IamRoleWaitHandle": {
    	"DependsOn": [ "AviatrixRoleEC2", "AviatrixRoleApp", "CreateAviatrixAssumeRolePolicy", "CreateAviatrixAppPolicy", "AviatrixInstanceProfile" ],
    	"Condition": "CreateIamRoleCondition",
    	"Type": "AWS::CloudFormation::WaitConditionHandle",
   		"Properties": {}
    },
    "WaitCondition": {
    	"Type": "AWS::CloudFormation::WaitCondition",
    	"Properties": {
	      "Count": 0,
	      "Handle": {"Fn::If": ["CreateIamRoleCondition", {"Ref": "IamRoleWaitHandle"}, {"Ref": "WaitHandle"}]},
	      "Timeout": 1
   		}
    },

    "AVXSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Aviatrix - Allow HTTPS to Controller",
        "VpcId":  { "Ref":  "VPCID" } ,
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "CidrIp": "0.0.0.0/0",
          "FromPort": "443",
          "ToPort": "443"
        } ],
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix Security Group" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "AVXController": {
      "DependsOn": [ "AVXSG", "WaitCondition" ],
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "Name" ] },
        "KeyName": { "Ref": "KeyPair" },
        "InstanceType": { "Ref": "ControllerSize" },
        "IamInstanceProfile": "aviatrix-role-ec2",
        "NetworkInterfaces": [ {
          "DeviceIndex": "0",
          "GroupSet": [ { "Ref": "AVXSG" } ],
          "SubnetId": { "Ref": "PublicSubnet1" }
        } ],
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix Controller" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "AVXEIP": {
      "DependsOn": "AVXController",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "InstanceId": {"Ref":  "AVXController" }
      }
    }
  },
  "Outputs": {
    "AviatrixControllerEIP": { "Description": "AviatrixController External IP", "Value": { "Fn::GetAtt": [ "AVXController" , "PublicIp" ] } },
    "AviatrixControllerPrivateIP": { "Description": "AviatrixController Private IP", "Value": { "Fn::GetAtt": [ "AVXController" , "PrivateIp" ] } }
  }
}
